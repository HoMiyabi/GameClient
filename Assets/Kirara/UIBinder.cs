using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEngine.UI;

#if UNITY_EDITOR
using UnityEditor.SceneManagement;
#endif

namespace Kirara
{
    public class UIBinder : MonoBehaviour
    {

#if UNITY_EDITOR

        [SerializeField]
        private MonoBehaviour ui;
        [SerializeField]
        private string outputPath = "Scripts/Generated";

        public List<Item> nameTypeComList;

        [Serializable]
        public class Item
        {
            public string fieldName;
            public string comTypeFullName;
            public Component com;

            public void Deconstruct(out string fieldName, out string comTypeFullName, out Component com)
            {
                fieldName = this.fieldName;
                comTypeFullName = this.comTypeFullName;
                com = this.com;
            }
        }

        private HashSet<string> fieldNameSet;

        private const string declaration = "// This file is generated by UIBinder and should not be modified.\n";
        private const string sUsing = "";

        private const string begin = "{\n";
        private const string tab = "    ";
        private const string end = "}\n";

        private const string namespaceHeaderFormat = "namespace {0}\n";
        private const string classHeaderFormat = "public partial class {0}\n";

        private const string accessModifier = "public";

        private Dictionary<string, Type> identifierToType = new Dictionary<string, Type>()
        {
            {"btn", typeof(Button)},
            {"input", typeof(InputField)},
            {"text", typeof(Text)},
            {"img", typeof(Image)},
            {"tra", typeof(Transform)}
        };

        public void EditorGenerateUI()
        {
            nameTypeComList ??= new();
            nameTypeComList.Clear();

            fieldNameSet ??= new();
            fieldNameSet.Clear();

            Scan(transform);
            
            Type type = ui.GetType();
            string classNamespace = type.Namespace;
            string className = type.Name;
            string classFullName = type.FullName;

            string text = GenerateText(classNamespace, className);

            WriteFile(text, classFullName);

            SaveScene();
        }

        private string GenerateText(string classNamespace, string className)
        {
            string namespaceHeader = string.Empty;
            string namespaceBegin = string.Empty;
            string namespaceEnd = string.Empty;
            string namespaceTab = string.Empty;
            if (classNamespace != null)
            {
                namespaceHeader = string.Format(namespaceHeaderFormat, classNamespace);
                namespaceBegin = begin;
                namespaceTab = tab;
                namespaceEnd = end;
            }

            string classHeader = string.Format(classHeaderFormat, className);
            string classBegin = begin;
            string classTab = tab;
            string classEnd = end;

            var sb = new StringBuilder();
            sb.Append(declaration);
            sb.Append(sUsing);
            sb.Append(namespaceHeader);
            sb.Append(namespaceBegin);
            sb.Append(namespaceTab + classHeader);
            sb.Append(namespaceTab + classBegin);
            
            foreach (var (fieldName, comTypeFullName, _) in nameTypeComList)
            {
                sb.Append(namespaceTab + classTab);
                sb.Append(accessModifier);
                sb.Append(' ');
                sb.Append(comTypeFullName);
                sb.Append(' ');
                sb.Append($"{fieldName};\n");
            }
            sb.Append(namespaceTab + classEnd);
            sb.Append(namespaceEnd);
            return sb.ToString();
        }

        private void WriteFile(string text, string classFullname)
        {
            string outputDir = Path.Join(Application.dataPath, outputPath);
            string filename = classFullname + ".g.cs";
            string filePath = Path.Join(outputDir, filename);
            Directory.CreateDirectory(outputDir);
            File.WriteAllText(filePath, text, Encoding.UTF8);
        }

        private void Scan(Transform tra)
        {
            if (tra == null)
            {
                return;
            }
            Stack<Transform> stk = new();
            stk.Push(tra);
            while (stk.Count > 0)
            {
                var cur = stk.Pop();

                string _name = cur.name
                    .Replace("(", "_")
                    .Replace(")", "_")
                    .Replace(" ", "");

                foreach (var (prefix, type) in identifierToType)
                {
                    if (_name.StartsWith(prefix) && cur.TryGetComponent(type, out var com))
                    {
                        if (fieldNameSet.Add(_name))
                        {
                            nameTypeComList.Add(new Item() {fieldName = _name, comTypeFullName = type.FullName, com = com});
                            break;
                        }
                        throw new Exception($"名称{cur.name}, {_name}有重复");
                    }
                }

                foreach (Transform child in cur)
                {
                    stk.Push(child);
                }
            }
        }

        public void EditorBindUI()
        {
            Type type = ui.GetType();
            foreach (var (fieldName, _, com) in nameTypeComList)
            {
                var fieldInfo = type.GetField(fieldName);
                fieldInfo.SetValue(ui, com);
            }

            SaveScene();
        }

        public void SaveScene()
        {
            EditorSceneManager.MarkSceneDirty(ui.gameObject.scene);

            // Prefab不是Preview Scene
            if (!EditorSceneManager.IsPreviewScene(ui.gameObject.scene))
            {
                // ArgumentException: EditorSceneManager.SetActive failed; you can not save a preview scene
                EditorSceneManager.SaveScene(ui.gameObject.scene);
            }
        }

#endif

    }
}