using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.UI;

namespace Kirara
{
    public class UIBinder : MonoBehaviour
    {
        [SerializeField] private MonoBehaviour ui;
        [SerializeField] private string outputPath = "Scripts/Generated";

        private Dictionary<string, (Component, Type)> nameToComAndType;

        private const string declaration = "// This file is generated by UIBinder and should not be modified.\n";
        private const string sUsing =
@"using UnityEngine;
using UnityEngine.UI;
";

        private const string begin = "{\n";
        private const string spacing = "    ";
        private const string end = "}\n";

        private const string namespaceHeaderFormat = "namespace {0}\n";
        private const string classHeaderFormat = "public partial class {0}\n";

        private Dictionary<string, Type> prefixToType = new Dictionary<string, Type>()
        {
            {"btn", typeof(Button)},
            {"input", typeof(InputField)},
            {"text", typeof(Text)},
            {"img", typeof(Image)},
            {"tra", typeof(Transform)}
        };

        public void EditorGenerateUI()
        {
            nameToComAndType ??= new();
            nameToComAndType.Clear();

            Scan(transform);

            Type type = ui.GetType();
            string classNamespace = type.Namespace;
            string className = type.Name;
            string classFullName = type.FullName;

            string namespaceHeader = string.Empty;
            string namespaceBegin = string.Empty;
            string namespaceEnd = string.Empty;
            string namespaceSpacing = string.Empty;
            if (classNamespace != null)
            {
                namespaceHeader = string.Format(namespaceHeaderFormat, classNamespace);
                namespaceBegin = begin;
                namespaceSpacing = spacing;
                namespaceEnd = end;
            }

            string classHeader = string.Format(classHeaderFormat, className);
            string classBegin = begin;
            string classSpacing = spacing;
            string classEnd = end;

            string text = "";
            text += declaration;
            text += sUsing;
            text += namespaceHeader;
            text += namespaceBegin;
            text += namespaceSpacing + classHeader;
            text += namespaceSpacing + classBegin;

            // if (nameToCom.Count > 0)
            // {
            //     text += namespaceSpacing + classSpacing;
            //     text += "[Header(\"UI Binder 生成\")]";
            // }
            foreach (var (_name, (com, comType)) in nameToComAndType)
            {
                text += namespaceSpacing + classSpacing;
                text += "public ";
                text += comType.Name;
                text += " ";
                text += $"{_name};\n";
            }
            text += namespaceSpacing + classEnd;
            text += namespaceEnd;

            WriteFile(text, classFullName);

            var data = ScriptableObject.CreateInstance<UIBinderSO>();
            data.ui = ui;
            data.nameAndComs = new();
            foreach (var (_name, (com, comType)) in nameToComAndType)
            {
                data.nameAndComs.Add(new UIBinderSO.NameAndCom() {name = _name, component = com});
            }
            AssetDatabase.CreateAsset(data, "Assets/Kirara/UIBinderSO.asset");
            AssetDatabase.SaveAssets();

            // Both need
            AssetDatabase.Refresh();
        }

        private void WriteFile(string text, string classFullname)
        {
            string outputDir = Path.Join(Application.dataPath, outputPath);
            string filename = classFullname + ".g.cs";
            string filePath = Path.Join(outputDir, filename);
            Directory.CreateDirectory(outputDir);
            File.WriteAllText(filePath, text, Encoding.UTF8);
        }

        private void Scan(Transform cur)
        {
            string _name = cur.name
                .Replace("(", "_")
                .Replace(")", "")
                .Replace(" ", "");

            foreach (var (prefix, type) in prefixToType)
            {
                if (_name.StartsWith(prefix) && cur.TryGetComponent(type, out var com))
                {
                    nameToComAndType.Add(_name, (com, type));
                    break;
                }
            }

            foreach (Transform child in cur)
            {
                Scan(child);
            }
        }

        public void EditorBindUI()
        {
            var data = AssetDatabase.LoadAssetAtPath<UIBinderSO>("Assets/Kirara/UIBinderSO.asset");
            if (data.nameAndComs.Count == 0)
            {
                return;
            }
            Type type = ui.GetType();
            foreach (var (_name,  com) in data.nameAndComs)
            {
                var fieldInfo = type.GetField(_name);
                fieldInfo.SetValue(ui, com);
            }
            EditorSceneManager.MarkSceneDirty(ui.gameObject.scene);
        }
    }
}